// Code generated by MockGen. DO NOT EDIT.
// Source: cityaqrpc/cityaq.wasm.pb.go

// Package mock_cityaqrpc is a generated GoMock package.
package mock_cityaqrpc

import (
	cityaqrpc "github.com/ctessum/cityaq/cityaqrpc"
	gomock "github.com/golang/mock/gomock"
	grpc_wasm "github.com/johanbrandhorst/grpc-wasm"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockCityAQClient is a mock of CityAQClient interface
type MockCityAQClient struct {
	ctrl     *gomock.Controller
	recorder *MockCityAQClientMockRecorder
}

// MockCityAQClientMockRecorder is the mock recorder for MockCityAQClient
type MockCityAQClientMockRecorder struct {
	mock *MockCityAQClient
}

// NewMockCityAQClient creates a new mock instance
func NewMockCityAQClient(ctrl *gomock.Controller) *MockCityAQClient {
	mock := &MockCityAQClient{ctrl: ctrl}
	mock.recorder = &MockCityAQClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCityAQClient) EXPECT() *MockCityAQClientMockRecorder {
	return m.recorder
}

// Cities mocks base method
func (m *MockCityAQClient) Cities(ctx context.Context, in *cityaqrpc.CitiesRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.CitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cities", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.CitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cities indicates an expected call of Cities
func (mr *MockCityAQClientMockRecorder) Cities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cities", reflect.TypeOf((*MockCityAQClient)(nil).Cities), varargs...)
}

// CityGeometry mocks base method
func (m *MockCityAQClient) CityGeometry(ctx context.Context, in *cityaqrpc.CityGeometryRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.CityGeometryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CityGeometry", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.CityGeometryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityGeometry indicates an expected call of CityGeometry
func (mr *MockCityAQClientMockRecorder) CityGeometry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityGeometry", reflect.TypeOf((*MockCityAQClient)(nil).CityGeometry), varargs...)
}

// GriddedEmissions mocks base method
func (m *MockCityAQClient) GriddedEmissions(ctx context.Context, in *cityaqrpc.GriddedEmissionsRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.GriddedEmissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GriddedEmissions", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.GriddedEmissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GriddedEmissions indicates an expected call of GriddedEmissions
func (mr *MockCityAQClientMockRecorder) GriddedEmissions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GriddedEmissions", reflect.TypeOf((*MockCityAQClient)(nil).GriddedEmissions), varargs...)
}

// EmissionsGridBounds mocks base method
func (m *MockCityAQClient) EmissionsGridBounds(ctx context.Context, in *cityaqrpc.EmissionsGridBoundsRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.EmissionsGridBoundsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EmissionsGridBounds", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.EmissionsGridBoundsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmissionsGridBounds indicates an expected call of EmissionsGridBounds
func (mr *MockCityAQClientMockRecorder) EmissionsGridBounds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmissionsGridBounds", reflect.TypeOf((*MockCityAQClient)(nil).EmissionsGridBounds), varargs...)
}

// GriddedConcentrations mocks base method
func (m *MockCityAQClient) GriddedConcentrations(ctx context.Context, in *cityaqrpc.GriddedConcentrationsRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.GriddedConcentrationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GriddedConcentrations", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.GriddedConcentrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GriddedConcentrations indicates an expected call of GriddedConcentrations
func (mr *MockCityAQClientMockRecorder) GriddedConcentrations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GriddedConcentrations", reflect.TypeOf((*MockCityAQClient)(nil).GriddedConcentrations), varargs...)
}

// MapScale mocks base method
func (m *MockCityAQClient) MapScale(ctx context.Context, in *cityaqrpc.MapScaleRequest, opts ...grpc_wasm.CallOption) (*cityaqrpc.MapScaleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapScale", varargs...)
	ret0, _ := ret[0].(*cityaqrpc.MapScaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapScale indicates an expected call of MapScale
func (mr *MockCityAQClientMockRecorder) MapScale(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapScale", reflect.TypeOf((*MockCityAQClient)(nil).MapScale), varargs...)
}

// MockCityAQServer is a mock of CityAQServer interface
type MockCityAQServer struct {
	ctrl     *gomock.Controller
	recorder *MockCityAQServerMockRecorder
}

// MockCityAQServerMockRecorder is the mock recorder for MockCityAQServer
type MockCityAQServerMockRecorder struct {
	mock *MockCityAQServer
}

// NewMockCityAQServer creates a new mock instance
func NewMockCityAQServer(ctrl *gomock.Controller) *MockCityAQServer {
	mock := &MockCityAQServer{ctrl: ctrl}
	mock.recorder = &MockCityAQServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCityAQServer) EXPECT() *MockCityAQServerMockRecorder {
	return m.recorder
}

// Cities mocks base method
func (m *MockCityAQServer) Cities(arg0 context.Context, arg1 *cityaqrpc.CitiesRequest) (*cityaqrpc.CitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cities", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.CitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cities indicates an expected call of Cities
func (mr *MockCityAQServerMockRecorder) Cities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cities", reflect.TypeOf((*MockCityAQServer)(nil).Cities), arg0, arg1)
}

// CityGeometry mocks base method
func (m *MockCityAQServer) CityGeometry(arg0 context.Context, arg1 *cityaqrpc.CityGeometryRequest) (*cityaqrpc.CityGeometryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityGeometry", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.CityGeometryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityGeometry indicates an expected call of CityGeometry
func (mr *MockCityAQServerMockRecorder) CityGeometry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityGeometry", reflect.TypeOf((*MockCityAQServer)(nil).CityGeometry), arg0, arg1)
}

// GriddedEmissions mocks base method
func (m *MockCityAQServer) GriddedEmissions(arg0 context.Context, arg1 *cityaqrpc.GriddedEmissionsRequest) (*cityaqrpc.GriddedEmissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GriddedEmissions", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.GriddedEmissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GriddedEmissions indicates an expected call of GriddedEmissions
func (mr *MockCityAQServerMockRecorder) GriddedEmissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GriddedEmissions", reflect.TypeOf((*MockCityAQServer)(nil).GriddedEmissions), arg0, arg1)
}

// EmissionsGridBounds mocks base method
func (m *MockCityAQServer) EmissionsGridBounds(arg0 context.Context, arg1 *cityaqrpc.EmissionsGridBoundsRequest) (*cityaqrpc.EmissionsGridBoundsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmissionsGridBounds", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.EmissionsGridBoundsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmissionsGridBounds indicates an expected call of EmissionsGridBounds
func (mr *MockCityAQServerMockRecorder) EmissionsGridBounds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmissionsGridBounds", reflect.TypeOf((*MockCityAQServer)(nil).EmissionsGridBounds), arg0, arg1)
}

// GriddedConcentrations mocks base method
func (m *MockCityAQServer) GriddedConcentrations(arg0 context.Context, arg1 *cityaqrpc.GriddedConcentrationsRequest) (*cityaqrpc.GriddedConcentrationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GriddedConcentrations", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.GriddedConcentrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GriddedConcentrations indicates an expected call of GriddedConcentrations
func (mr *MockCityAQServerMockRecorder) GriddedConcentrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GriddedConcentrations", reflect.TypeOf((*MockCityAQServer)(nil).GriddedConcentrations), arg0, arg1)
}

// MapScale mocks base method
func (m *MockCityAQServer) MapScale(arg0 context.Context, arg1 *cityaqrpc.MapScaleRequest) (*cityaqrpc.MapScaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapScale", arg0, arg1)
	ret0, _ := ret[0].(*cityaqrpc.MapScaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapScale indicates an expected call of MapScale
func (mr *MockCityAQServerMockRecorder) MapScale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapScale", reflect.TypeOf((*MockCityAQServer)(nil).MapScale), arg0, arg1)
}
